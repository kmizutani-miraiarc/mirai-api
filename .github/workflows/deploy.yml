name: Deploy to Production Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (if any)
      run: |
        # テストファイルがある場合のみ実行
        if [ -f "test_*.py" ] || [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests found, skipping test step"
        fi
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # デプロイディレクトリに移動
          cd /var/www/mirai-api
          
          # 既存のアプリケーションを停止
          sudo systemctl stop mirai-api || true
          
          # バックアップを作成
          if [ -f "main.py" ]; then
            sudo mkdir -p backups
            sudo tar -czf backups/app.backup.$(date +%Y%m%d_%H%M%S).tar.gz --exclude='backups' --exclude='*.tar.gz' --exclude='.git' .
          fi
          
          # Gitから最新のコードを取得
          git fetch origin
          git reset --hard origin/main
          
          # 権限を設定
          sudo chmod -R 755 .
          
          # 仮想環境を作成・更新
          if [ ! -d "venv" ]; then
            sudo python3 -m venv venv
          fi
          
          # 依存関係をインストール
          sudo venv/bin/pip install --upgrade pip
          sudo venv/bin/pip install -r requirements.txt
          
          # アプリケーションを起動
          sudo systemctl start mirai-api
          sudo systemctl enable mirai-api
          
          # ヘルスチェック
          sleep 10
          if curl -f http://localhost:8000/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed - health check failed"
            # ロールバック
            sudo systemctl stop mirai-api
            if [ -f "backups/app.backup.*.tar.gz" ]; then
              LATEST_BACKUP=$(ls -t backups/app.backup.*.tar.gz | head -1)
              sudo tar -xzf "$LATEST_BACKUP"
              sudo systemctl start mirai-api
            fi
            exit 1
          fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed!"
        fi
